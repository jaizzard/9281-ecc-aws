---

- include_vars: ec2.yml

- name: Create EC2 Security Group for WordPress
  ec2_group:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    name: "{{ ec2.wordpress.group.name }}"
    description: "{{ ec2.wordpress.group.description }}"
    vpc_id: "{{ ec2.vpc_id }}"
    region: "{{ ec2.region }}"
    rules: "{{ ec2.wordpress.group.rules }}"
  tags:
    - ec2
    - wordpress
    - security-group
    
- name: Create EC2 Keypair for WordPress
  ec2_key:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    name: "{{ ec2.wordpress.key_name }}"
    state: present
    region: "{{ ec2.region }}"
  register: keypair_results
  notify:
    - Write EC2 Private key to Host
  tags:
    - ec2
    - wordpress
    - key-pair

- name: Check if WordPress Instance file Exists and Download
  s3:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    bucket: "{{ s3.server_specs.bucket }}"
    object: "{{ s3.server_specs.object }}"
    dest: "/tmp/{{ s3.server_specs.object }}"
    mode: get
  register: s3_results
  ignore_errors: true
  tags:
    - test

- name: Load the EC2 Specs into Memory
  include_vars: "/tmp/{{ s3.server_specs.object }}"
  when: "not {{ s3_results|failed }}"

- name: Check if the EC2 Instance Exists
  ec2_remote_facts:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    filters:
      instance-id: "{{ instance_ids[0] }}"
    region: "{{ ec2.region }}"
  when: "{{ instance_ids[0] is defined }}"
  register: ec2_existence_results
  tags:
    - testing

- name: Launch EC2 Instance for WordPress
  ec2:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    instance_type: "{{ ec2.instance_type }}"
    image: "{{ ec2.image }}"
    region: "{{ ec2.region }}" 
    key_name: "{{ ec2.wordpress.key_name }}"
    wait: "{{ ec2.wordpress.wait }}"
    count: "{{ ec2.wordpress.count }}"
    instance_tags: "{{ ec2.wordpress.instance_tags }}"
    assign_public_ip: "{{ ec2.wordpress.assign_public_ip }}"
    vpc_subnet_id: "{{ ec2.wordpress.vpc_subnet_id }}"
    volumes: "{{ ec2.wordpress.volumes }}"
    group: "{{ ec2.wordpress.group }}"
  when:
    - "{{ ec2_existence_results|skipped or ec2_existence_results.instances[0].state in ['terminated', 'shutting-down']}}"
  register: ec2_wordpress_instance
  notify:
    - Write EC2 WordPress Specs to File
    - Put EC2 WordPress Specs into S3
  tags:
    - ec2
  
- name: Load the EC2 Specs into Memory
  include_vars: "/tmp/{{ s3.server_specs.object }}"

- name: Waiting on SSH
  wait_for:
    host: "{{ instances[0].private_ip }}"
    port: 22
    timeout: 300
    state: started

- name: Adding IP of newly created instance to inventory
  local_action: add_host
  args:
    name: "{{ instances[0].private_ip }}"
    group: "{{ hosts.wordpress_server }}"
