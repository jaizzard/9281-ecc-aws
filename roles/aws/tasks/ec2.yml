---

- name: Create EC2 Security Group for WordPress
  ec2_group:
    #aws_access_key: "{{ aws.aws_access_key }}"
    #aws_secret_key: "{{ aws.aws_secret_key }}"
    name: "{{ item.name }}"
    description: "{{ item.description }}"
    vpc_id: "{{ ec2.vpc_id }}"
    #region: "{{ ec2.region }}"
    rules: "{{ item.rules }}"
  with_items: "{{ ec2.wordpress.group }}"
  tags:
    - ec2
    - security-group

- name: Create EC2 Keypair for WordPress
  ec2_key:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    name: "{{ ec2.wordpress.key_name }}"
    #state: present
    region: "{{ ec2.region }}"
  register: keypair_results
  tags:
    - ec2
    - key-pair

- name: Write EC2 Private Key to File
  copy:
    content: "{{ keypair_results.key.private_key }}"
    dest: "{{ private_key_file }}"
    owner: ec2-user
    group: ec2-user 
    mode: 0600
  when: "{{ keypair_results.changed }}"
  tags:
    - ec2
    - key-pair

- name: Check if WordPress Instance file Exists and Download
  s3:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    #bucket: "{{ s3.server_specs.bucket }}"
    #object: "{{ s3.server_specs.object }}"
    dest: "/tmp/{{ s3.server_specs.object }}"
    mode: get
  register: s3_results
  ignore_errors: true
  changed_when: false
  tags:
    - s3
    - specs-file

- name: Load the EC2 Specs into Memory
  include_vars: "/tmp/{{ s3.server_specs.object }}"
  when: "not {{ s3_results|failed }}"
  tags:
    - ec2
    - specs-file

- name: Check if the EC2 Instance Exists
  ec2_remote_facts:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    filters:
      instance-id: "{{ instance_ids[0] }}"
    region: "{{ ec2.region }}"
  when: "{{ instance_ids[0] is defined }}"
  register: ec2_existence_results
  tags:
    - ec2
    - specs-file

- name: Launch EC2 Instance for WordPress
  ec2:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    instance_type: "{{ ec2.instance_type }}"
    image: "{{ ec2.image }}"
    region: "{{ ec2.region }}" 
    #key_name: "{{ ec2.wordpress.key_name }}"
    wait: "{{ ec2.wordpress.wait }}"
    count: "{{ ec2.wordpress.count }}"
    instance_tags: "{{ ec2.wordpress.instance_tags }}"
    #assign_public_ip: "{{ ec2.wordpress.assign_public_ip }}"
    vpc_subnet_id: "{{ ec2.vpc_subnet_id }}"
    volumes: "{{ ec2.wordpress.volumes }}"
    group: "{{ ec2.wordpress.group[0].name }}"
  when:
    - "{{ ec2_existence_results|skipped or ec2_existence_results.instances[0].state in ['terminated', 'shutting-down']}}"
  register: ec2_instance_results
  tags:
    - ec2

- name: Write EC2 WordPress Specs to File
  copy:
    content: "{{ ec2_instance_results }}"
    dest: "/tmp/{{ s3.server_specs.object }}"
  when: "{{ not ec2_instance_results|skipped }}"
  tags:
    - specs-file

- name: Put EC2 WordPress Specs into S3
  s3:
    aws_access_key: "{{ aws.aws_access_key }}"
    aws_secret_key: "{{ aws.aws_secret_key }}"
    bucket: "{{ s3.server_specs.bucket }}"
    object: "{{ s3.server_specs.object }}"
    src: "/tmp/{{ s3.server_specs.object }}"
    mode: put
  when: "{{ not ec2_instance_results|skipped }}" 
  tags:
    - s3
    - specs-file

- name: Load the EC2 Specs into Memory
  include_vars: "/tmp/{{ s3.server_specs.object }}"
  tags:
    - specs-file

- name: Waiting on SSH
  wait_for:
    host: "{{ instances[0].private_ip }}"
    port: 22
    timeout: 300
    state: started
  tags:
    - ssh

#- name: Adding IP of newly created instance to inventory
#  check_mode: no
#  add_host:
#    name: "{{ instances[0].private_ip }}"
#    group: "{{ hosts.wordpress_server }}"
